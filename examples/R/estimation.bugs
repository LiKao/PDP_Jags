data {
  # We name our nodes, so the code becomes more readable
  Cue1Node    <- 1
  Cue2Node    <- 2
  Cue3Node    <- 3
  Cue4Node    <- 4
  Cue5Node    <- 5
  Cue6Node    <- 6
  OptionANode <- 7
  OptionBNode <- 8

  # Number of trials
  DimVal <- dim(validities)
  N.trials <- DimVal[2]

  nets <-
       BiLink( 1, Cue1Node, OptionANode, BiLink( 2, Cue1Node, OptionBNode, # BiLink creates a bidirection link between two nodes
       BiLink( 3, Cue2Node, OptionANode, BiLink( 4, Cue2Node, OptionBNode, # BiLink creates a bidirection link between two nodes
       BiLink( 5, Cue3Node, OptionANode, BiLink( 6, Cue3Node, OptionBNode, # BiLink creates a bidirection link between two nodes
       BiLink( 7, Cue4Node, OptionANode, BiLink( 8, Cue4Node, OptionBNode, # BiLink creates a bidirection link between two nodes
       BiLink( 9, Cue5Node, OptionANode, BiLink(10, Cue5Node, OptionBNode, # BiLink creates a bidirection link between two nodes
       BiLink(11, Cue6Node, OptionANode, BiLink(12, Cue6Node, OptionBNode, # BiLink creates a bidirection link between two nodes
       BiLink(13, OptionANode, OptionBNode,                                # BiLink creates a bidirection link between two nodes
       BiasInput(14, Cue1Node,                                             # Adds an input from Bias or GeneralActivation node
       BiasInput(15, Cue2Node,                                             # Adds an input from Bias or GeneralActivation node
       BiasInput(16, Cue3Node,                                             # Adds an input from Bias or GeneralActivation node
       BiasInput(17, Cue4Node,                                             # Adds an input from Bias or GeneralActivation node
       BiasInput(18, Cue5Node,                                             # Adds an input from Bias or GeneralActivation node
       BiasInput(19, Cue6Node,                                             # Adds an input from Bias or GeneralActivation node
       MakeNetwork(8))))))))))))))))))))                                   # Initial network to be passed to all construction function
       # Ensure all parentheses are closed!
}

model {
  # Random network parameters
  f ~ dlnorm(log(0.01),1)
  c ~ dlnorm(log(0.2),1)
  p ~ dlnorm(log(1.5),1)
  lambda ~ dlnorm(log(1),1)

  # Input to option node A from cues
  AIn <- c*ACue
  # Input to option node B from cues
  BIn <- c*BCue

  finact <- Simulate0(
    nets, 0.1,
    AIn[1,], BIn[1,],
    AIn[2,], BIn[2,],
    AIn[3,], BIn[3,],
    AIn[4,], BIn[4,],
    AIn[5,], BIn[5,],
    AIn[6,], BIn[6,],
    -f,
    tau(validities[1,],p), tau(validities[2,],p), tau(validities[3,],p),
    tau(validities[4,],p), tau(validities[5,],p), tau(validities[6,],p) )

  for(i in 1:N.trials) {
    p.oA[i] <- exp(lambda*finact[7,i])/(exp(lambda*finact[7,i]) + exp(lambda*finact[8,i]))
  }

  for(i in 1:length(choices)) {
    choices[i] ~ dbern(p.oA[trial[i]])
  }
}